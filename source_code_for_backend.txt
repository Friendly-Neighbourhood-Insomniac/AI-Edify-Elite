import os
import gradio as gr
import openai
import speech_recognition as sr
import logging
import traceback

# Set up logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

# Set OpenAI API key
openai.api_key = os.environ.get("OPENAI_API_KEY")

def generate_text():
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "Generate exactly two simple sentences for English pronunciation practice. Do not include any instructions, comments, or additional text."},
                {"role": "user", "content": "Create two simple sentences for pronunciation practice."}
            ]
        )
        return response.choices[0].message['content'].strip()
    except Exception as e:
        logger.error(f"Error in generate_text: {str(e)}")
        return "Error generating text. Please try again."

def get_pronunciation_feedback(original_text, transcription):
    try:
        logger.debug(f"Original text: {original_text}")
        logger.debug(f"Transcription: {transcription}")
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "You are a helpful pronunciation assistant. Compare the generated text with the user's transcription and provide feedback on how the user can improve their pronunciation. Single out specific words they pronounced incorrectly and give tips on how to improve, like for example 'schedule' can be pronounced as 'sked-jool'."},
                {"role": "user", "content": f"Original text: '{original_text}'\nTranscription: '{transcription}'\nProvide pronunciation feedback."}
            ]
        )
        feedback = response.choices[0].message['content']
        logger.debug(f"Generated feedback: {feedback}")
        return feedback
    except Exception as e:
        logger.error(f"Error in get_pronunciation_feedback: {str(e)}")
        logger.error(traceback.format_exc())
        return "Error generating feedback. Please try again."

def transcribe_audio_realtime(audio):
    try:
        logger.debug(f"Received audio file: {audio}")
        recognizer = sr.Recognizer()
        with sr.AudioFile(audio) as source:
            logger.debug("Reading audio file")
            audio_data = recognizer.record(source)
        logger.debug("Transcribing audio")
        transcription = recognizer.recognize_google(audio_data)
        logger.debug(f"Transcription result: {transcription}")
        return transcription
    except sr.UnknownValueError:
        logger.warning("Could not understand audio")
        return "Could not understand audio"
    except sr.RequestError as e:
        logger.error(f"Could not request results from the speech recognition service; {str(e)}")
        return "Error in speech recognition service"
    except Exception as e:
        logger.error(f"Error in transcribe_audio_realtime: {str(e)}")
        logger.error(traceback.format_exc())
        return "Error transcribing audio. Please try again."

def practice_pronunciation(audio, text_to_read):
    logger.info("Starting practice_pronunciation function")
    if not text_to_read:
        logger.info("Generating new text to read")
        text_to_read = generate_text()
    logger.info(f"Text to read: {text_to_read}")
    
    logger.info("Starting transcription")
    transcription = transcribe_audio_realtime(audio)
    logger.info(f"Transcription result: {transcription}")
    
    logger.info("Getting pronunciation feedback")
    feedback = get_pronunciation_feedback(text_to_read, transcription)
    logger.info(f"Feedback generated: {feedback}")
    
    return text_to_read, transcription, feedback

# Gradio interface
with gr.Blocks() as demo:
    gr.Markdown("# Pronunciation Practice Tool")
    gr.Markdown("Generate a text to read, then record yourself reading it. The system will provide pronunciation feedback.")
    
    with gr.Row():
        text_to_read = gr.Textbox(label="Text to Read")
        generate_button = gr.Button("Generate New Text")
    
    audio_input = gr.Audio(type="filepath", label="Record your voice")
    
    with gr.Row():
        transcription_output = gr.Textbox(label="Your Transcription")
        feedback_output = gr.Textbox(label="Pronunciation Feedback")
    
    submit_button = gr.Button("Submit")
    
    generate_button.click(generate_text, outputs=text_to_read)
    submit_button.click(practice_pronunciation, inputs=[audio_input, text_to_read], outputs=[text_to_read, transcription_output, feedback_output])

# Launch the app
if __name__ == "__main__":
    demo.launch()
